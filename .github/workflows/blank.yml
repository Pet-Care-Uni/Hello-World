# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  apigen_net:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'apigen_net')
    permissions:
      contents: write
    env:
      APIQ_GITHUB_URL: ${{ secrets.APIQ_GITHUB_URL }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
      GITLAB_USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
      GITLAB_USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y curl && sudo apt clean
          sudo apt update && sudo apt install -y curl git

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Generate API files
        run: |
          curl -X POST https://api-gateway.apiquality.io/api-apigen-dotnet/v1/generator/file \
            -H "accept:application/zip" \
            -H "Content-Type:multipart/form-data" \
            --form "file=@$APIQ_API_FILENAME" \
            -o generated.zip

      - name: Extract and organize generated files
        run: |
          mkdir -p ./auto-generated/apigen/$APIQ_LANGUAGE
          unzip -o -q generated.zip -d ./auto-generated/apigen/$APIQ_LANGUAGE
          rm generated.zip

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory $(pwd)

      - name: Configure Git
        run: |
          git config --global user.email "${GITLAB_USER_EMAIL}"
          git config --global user.name "${GITLAB_USER_NAME}"
          git checkout -f ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }}
          git pull

      - name: Verificar cambios y hacer commit
        run: |
          git add ./auto-generated/apigen/$APIQ_LANGUAGE
          git status
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "DotNet"
            git push origin $GITHUB_REF_NAME --no-verify
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dotnet
          path: ./auto-generated/apigen/$APIQ_LANGUAGE
          retention-days: 1

  redocly_linter:
    runs-on: ubuntu-latest
    container: node:latest
    if: contains(github.event.head_commit.message, 'redocly_linter')
    permissions:
      contents: write
    env:
      APIQ_GITHUB_URL: ${{ secrets.APIQ_GITHUB_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory $(pwd)

      - name: Configure Git
        run: |
          echo ${GITHUB_ACTOR}
          echo "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git checkout -f ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }}
          git pull

      - name: Install Redocly CLI
        run: npm install @redocly/cli -g

      - name: Run Redocly Linter
        run: |
          mkdir -p auto-generated/redocly
          redocly lint $APIQ_API_FILENAME --format checkstyle > auto-generated/redocly/redocly_report.xml || LINT_EXIT_CODE=$?
          git add .
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Generate redocly linter report"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git -o ci.skip
          fi
          exit $LINT_EXIT_CODE

  openapi_diffs:
    runs-on: ubuntu-latest
    needs: redocly_linter
    if: always() && contains(github.event.head_commit.message, 'openapi_diffs')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Set Variables
        run: |
          if [ -z "$APIQ_API_FILENAME" ]; then
            echo "ERROR: APIQ_API_FILENAME no estÃ¡ definido"
            exit 1
          fi
          BASE_FILENAME=$(echo "$APIQ_API_FILENAME" | sed 's/\.yaml//')
          echo "BASE_FILENAME=$BASE_FILENAME" >> $GITHUB_ENV

      - name: Get Last Commit Hash
        run: |
          if [ "$(git rev-list --count HEAD)" -gt 1 ]; then
              echo "LAST_COMMIT=$(git rev-parse HEAD~1)" >> $GITHUB_ENV
          else
              echo "No previous version detected."
              exit 0
          fi

      - name: Get Current and Previous OpenAPI Files
        run: |
          git show HEAD:./$APIQ_API_FILENAME > $APIQ_API_FILENAME
          git show $LAST_COMMIT:./$APIQ_API_FILENAME > ${BASE_FILENAME}_old.yaml

      - name: Run OpenAPI Diff in Container
        continue-on-error: true
        run: |
          docker run --rm -v ${{ github.workspace }}:/workdir -w /workdir openapitools/openapi-diff:2.0.1 \
            ${BASE_FILENAME}_old.yaml ${APIQ_API_FILENAME} \
            --fail-on-incompatible --error --info --html diffs-report.html

  sonarqube:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'sonarqube')
    container:
      image: sonarsource/sonar-scanner-cli:4.7
      options: --entrypoint ""

    env:
      SONAR_USER_HOME: ${{ github.workspace }}/.sonar
      GIT_DEPTH: 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Modify SonarQube configuration
        run: |
          export API_ID=$(grep '^sonar.projectKey=' sonar-project.properties | awk -F'[=_]' '{print $2}')
          export SONAR_PROJECT_KEY="${API_ID}_${APIQ_API_NAME}_${CI_COMMIT_BRANCH}"
          sed -i "s/^sonar.projectKey=.*/sonar.projectKey=${SONAR_PROJECT_KEY}/" "sonar-project.properties"
          sed -i "s/^sonar.openapi.path.API_DEFINITION_TYPE=.*/sonar.openapi.path.API_DEFINITION_TYPE=${SONAR_PROJECT_KEY}/" "sonar-project.properties"
        shell: bash

      - name: Cache SonarQube files
        uses: actions/cache@v3
        with:
          path: .sonar/cache
          key: ${{ runner.os }}-sonarqube-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-sonarqube

      - name: Run SonarQube Scanner
        run: sonar-scanner -Dsonar.exclusions=**/*/*.* -Dsonar.qualitygate.wait=true
        continue-on-error: true

      - name: Debug Environment Variables
        run: env | grep SONAR_

  ref_resolver:
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always() && contains(github.event.head_commit.message, 'ref_resolver')
    permissions:
      contents: write
    env:
      APIQ_GITHUB_URL: ${{ secrets.APIQ_GITHUB_URL }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
      GITLAB_USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
      GITLAB_USER_NAME: ${{ secrets.GITLAB_USER_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Configure Git
        run: |
          git config --global user.email "${GITLAB_USER_EMAIL}"
          git config --global user.name "${GITLAB_USER_NAME}"
          git checkout -f ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }}
          git pull

      - name: Install Redocly CLI
        run: npm install @redocly/cli -g

      - name: Run Redocly bundle
        run: |
          redocly bundle $APIQ_API_FILENAME -o ./resolved/resolved-$APIQ_API_FILENAME
          redocly bundle $APIQ_API_FILENAME -o $APIQ_API_FILENAME

      - name: Stash changes
        run: |
          git stash push -m "Temp stash for $APIQ_API_FILENAME" $APIQ_API_FILENAME

      - name: Commit and push changes
        run: |
          git add ./resolved
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Ref resolver"
            git push origin $GITHUB_REF_NAME --no-verify
          fi

  sonar2spectral:
    runs-on: ubuntu-latest
    needs: ref_resolver
    if: always() && contains(github.event.head_commit.message, 'sonar2spectral')
    permissions:
      contents: write
    env:
      APIQ_GITHUB_URL: ${{ secrets.APIQ_GITHUB_URL }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
      GITLAB_USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
      GITLAB_USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Configure Git
        run: |
          git config --global user.email "${GITLAB_USER_EMAIL}"
          git config --global user.name "${GITLAB_USER_NAME}"
          git checkout -f ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }}
          git pull

      - name: Generate Spectral YAML file
        run: |
          echo "extends: ${APIQ_GATEWAY_URL}/profiles/${APIQ_GUIDE_STYLE_ID}/aq-spectral.yaml" > .spectral.yaml

      - name: Commit and push changes
        run: |
          git add .spectral.yaml
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Generate spectral rules file from Sonar guide style"
            git push origin $GITHUB_REF_NAME --no-verify
          fi
  microcks_enricher:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'microcks_enricher')
    permissions:
      contents: write
    env:
      APIQ_GITHUB_URL: ${{ secrets.APIQ_GITHUB_URL }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
      GITLAB_USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
      GITLAB_USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt-get install -y wget jq
          wget https://github.com/mikefarah/yq/releases/download/v4.30.8/yq_linux_amd64 -O /tmp/yq
          chmod +x /tmp/yq
          sudo mv /tmp/yq /usr/local/bin/

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Configure Git
        run: |
          git config --global user.email "${GITLAB_USER_EMAIL}"
          git config --global user.name "${GITLAB_USER_NAME}"
          git checkout -f ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }}
          git pull

      - name: Set dispatcher rules
        run: |
          dispatcher_rules="def headers = mockRequest.getRequestHeaders(); if (headers.hasValues(\"X-Microcks-Response-Name\")) { return headers.get(\"X-Microcks-Response-Name\", \"null\") }"
          extension=$(echo $APIQ_API_FILENAME | cut -f 2 -d '.')

      - name: Enrich API file (YAML)
        run: |
          if [[ "$extension" == "yaml" || "$extension" == "yml" ]]; then
            version=$(yq e '.swagger // .openapi' $APIQ_API_FILENAME)
            if [[ "$version" == "2.0" ]]; then
              echo 'Swagger format is not compatible with microcks dispatcher'
              exit 1
            fi
            yq eval '.paths | keys' $APIQ_API_FILENAME | sed 's/^- //' | while IFS= read -r endpoint; do
              for method in "${methods[@]}"; do
                method_exists=$(yq e ".paths[\"$endpoint\"].$method" $APIQ_API_FILENAME)
                if [[ "$method_exists" != "null" ]]; then
                  microcks_exists=$(yq e ".paths[\"$endpoint\"].$method.'x-microcks-operation'" $APIQ_API_FILENAME)
                  if [[ "$microcks_exists" == null ]]; then
                    yq eval -i ".paths[\"$endpoint\"].$method.x-microcks-operation.delay = 100" $APIQ_API_FILENAME
                    newtag="SCRIPT" yq e --inplace '.paths["'"$endpoint"'"].'"$method"'.x-microcks-operation.dispatcher |= strenv(newtag)' $APIQ_API_FILENAME
                    rules="$dispatcher_rules" yq e --inplace '.paths["'"$endpoint"'"].'"$method"'.x-microcks-operation.dispatcherRules |= strenv(rules)' $APIQ_API_FILENAME
                  fi
                fi
              done
            done
          fi

      - name: Enrich API file (JSON)
        run: |
          if [[ "$extension" == "json" ]]; then
            version=$(jq -r '.swagger // .openapi' $APIQ_API_FILENAME)
            if [[ "$version" == "2.0" ]]; then
              echo 'Swagger format is not compatible with microcks dispatcher'
              exit 1
            fi
            endpoints=$(jq -r '.paths | keys[]' $APIQ_API_FILENAME)
            for endpoint in $endpoints; do
              for method in "${methods[@]}"; do
                if jq -e ".paths[\"$endpoint\"].\"$method\"" $APIQ_API_FILENAME > /dev/null; then
                  if ! jq -e ".paths[\"$endpoint\"].\"$method\".\"x-microcks-operation\"" $APIQ_API_FILENAME > /dev/null; then
                    jq --arg dr "$dispatcher_rules" ".paths[\"$endpoint\"].\"$method\" |= . + {\"x-microcks-operation\": {\"delay\": 100, \"dispatcher\": \"SCRIPT\", \"dispatcherRules\": \$dr}}" $APIQ_API_FILENAME > temp.json
                    mv temp.json $APIQ_API_FILENAME
                  fi
                fi
              done
            done
          fi

      - name: Check git status
        run: git status

      - name: Commit and push changes
        run: |
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git add .
            git commit -m "Enricher"
            git push origin $GITHUB_REF_NAME --no-verify
          fi

      - name: Generate microcks file
        run: cat "$APIQ_API_FILENAME" > microcks_file.txt

    outputs:
      microcks_file: microcks_file.txt

  microcks:
    runs-on: ubuntu-latest
    needs: microcks_enricher
    if: always() && contains(github.event.head_commit.message, 'microcks')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Modify API title if JSON
        if: endsWith(env.APIQ_API_FILENAME, '.json')
        run: |
          sed -i "s/\"title\": \"[^\"]*/\"title\": \"$APIQ_API_TEMP_TITLE/" "$APIQ_API_FILENAME"

      - name: Modify API title if YAML
        if: endsWith(env.APIQ_API_FILENAME, '.yaml') || endsWith(env.APIQ_API_FILENAME, '.yml')
        run: |
          sed -i "s/\(title: \).*/\1\"$APIQ_API_TEMP_TITLE\"/" "$APIQ_API_FILENAME"

      - name: Run Microcks CLI
        run: |
          docker run --rm quay.io/microcks/microcks-cli:0.5.3 \
            microcks-cli import "$APIQ_API_FILENAME" \
            --microcksURL="${{ secrets.MICROCKS_URL }}/api/" \
            --keycloakClientId="${{ secrets.MICROCKS_CLI_CLIENT_ID }}" \
            --keycloakClientSecret="${{ secrets.MICROCKS_CLI_CLIENT_SECRET }}"

      - name: Upload API file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: microcks-api-file
          path: ${{ env.APIQ_API_FILENAME }}
          retention-days: 1

  openapi2postman:
    runs-on: ubuntu-latest
    needs: sonar2spectral
    if: always() && contains(github.event.head_commit.message, 'openapi2postman')
    permissions:
      contents: write
    env:
      APIQ_GITHUB_URL: ${{ secrets.APIQ_GITHUB_URL }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
      GITLAB_USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
      GITLAB_USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
    container:
      image: node:16
    steps:
      - name: Checkout del cÃ³digo
        uses: actions/checkout@v4

      - name: Load pipeline properties
        run: |
          if [ -f pipeline.properties ]; then
            while IFS='=' read -r key value; do
              if [[ ! -z "$key" ]]; then
                echo "$key=$value" >> $GITHUB_ENV
              fi
            done < pipeline.properties
          else
            echo "pipeline.properties not found"
            exit 1
          fi
        shell: bash

      - name: Set Git Safe Directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Configurar usuario de Git
        run: |
          git config --global user.email "${{ secrets.GITLAB_USER_EMAIL }}"
          git config --global user.name "${{ secrets.GITLAB_USER_NAME }}"
          git checkout -f ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }}
          git pull

      - name: Instalar openapi2postman
        run: npm i openapi2postman -g

      - name: Convertir OpenAPI a Postman
        run: |
          o2p --configuration ./auto-generated/$APIQ_POSTMAN_FOLDER/s2p_config_file.json --file $APIQ_API_FILENAME

      - name: Verificar cambios y hacer commit
        run: |
          git add ./auto-generated/$APIQ_POSTMAN_FOLDER
          git status
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Postman"
            git push origin $GITHUB_REF_NAME --no-verify
          fi

      - name: Guardar artefactos
        uses: actions/upload-artifact@v4
        with:
          name: postman-folder
          path: ./auto-generated/${{ env.APIQ_POSTMAN_FOLDER }}
          retention-days: 1
